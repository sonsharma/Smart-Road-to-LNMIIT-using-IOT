#!/usr/bin/env python
import struct, sys, traceback
import time
import os
import RPi.GPIO as GPIO
from btle import UUID, Peripheral, BTLEException
import serial
from time import sleep


def TI_UUID(val):
	return UUID("%08X-0451-4000-b000-000000000000" % (0xF0000000+val))


config_uuid= TI_UUID(0xAA02)
data_uuid=TI_UUID(0xAA01)

sensorOn= struct.pack("B",0x01)
sensorOff= struct.pack("B",0x00)

LED_PIN = 3
amb_thresh = 30.00
obj_thresh = 25.00

def GPIOsetup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(LED_PIN, GPIO.OUT)
        GPIO.setwarnings(False)

def ledON():
        GPIO.output(LED_PIN,1)
        print "led on"
        return()


def ledOFF():
        GPIO.output(LED_PIN,0)
        print "led off"
        return()

def ardu(val):
        bluetoothSerial = serial.Serial( "/dev/rfcomm0", baudrate=9600 )
        print val
        
        
        bluetoothSerial.write( str(val) )
        print bluetoothSerial.readline()

        return()

def getTemp():
        
        if len(sys.argv)!=2:
                print "Fatal, must pass device address:", sys.argv[0], "<device address>"
                quit()
        try:
                print "Infor, trying to connect to:", sys.argv[1]
                p = Peripheral(sys.argv[1])

        except BTLEException:
                print "Fatal, unable to connect!"

        except:
                print "Fatal, unexpected error!"
                traceback.print_exc()
                raise

        else:

                try:
                        print "Info, connected and turning sensor on!" 
                        ch=p.getCharacteristics(uuid=config_uuid)[0]
                        ch.write(sensorOn, withResponse=True)

                        print "Info, reading values!"
                        ch=p.getCharacteristics(uuid=data_uuid)[0]
                        rawVals=ch.read()

                        rawVobj = (ord(rawVals[1])<<8)+ord(rawVals[0]) 
                        rawTamb = (ord(rawVals[3])<<8)+ord(rawVals[2])

                        amb = float((rawTamb*0.25*0.03125)*1.8+32)
                        obj = float((rawVobj*0.25*0.03125)*1.8+32)

                        if amb>amb_thresh:
                                ledON()
                                ardu(1)
                        else:
                                ledOFF()
                                ardu(0)
                
                        
                        print "Ambient Temp: %.2f F" % float((rawTamb*0.25*0.03125)*1.8+32)
		
                        print "Object Temp: %.2f F" % float((rawVobj*0.25*0.03125)*1.8+32)

                        print "Info, turning sensor off!"
                        ch=p.getCharacteristics(uuid=config_uuid)[0]
                        ch.write(sensorOff, withResponse=True)

                except:
                        print "Fatal, unexpected error!"
                        traceback.print_exc()
                        raise

                finally:
                        print "Info, disconnecting!"
                        p.disconnect()


        finally:
                quit()

        return()

GPIOsetup()
getTemp()

